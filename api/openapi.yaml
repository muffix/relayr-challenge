openapi: "3.0.0"
info:
  title: relayr-challenge
  version: 0.1.0
  description: Template to be used as the blueprint for a basic microservice
servers:
  - url: http://relayr-challenge

components:
  schemas:
    HealthOK:
      type: object
      properties:
        status:
          type: string
          description: Returns "OK" on success
          example: OK
    HealthBad:
      type: object
      properties:
        status:
          type: string
          description: Returns "Service unavailable" on error
          example: Service unavailable
        errors:
          type: object
          description: >
            A map. Keys are healthcheck names, values are the error returned.
    Offer:
      type: object
      properties:
        product:
          type: string
          description: Name of the product
          example: Towel
        category:
          type: string
          description: Name of the category of the product
          example: Must Haves
        supplier:
          type: string
          description: Name of the supplier making the offer
          example: Hitchhiker Essentials
        price:
          type: number
          description: The price
          example: 42
    OfferResponse:
      type: object
      properties:
        importedOffersCount:
          type: number
          description: Number of offers imported
          example: 1
    OfferBatchRequest:
      type: array
      items:
        $ref: '#components/schemas/Offer'
    OfferErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: A description of the error
          example: invalid character 'L' looking for beginning of value
    OfferSearchRequest:
      type: object
      properties:
        product:
          type: string
          description: Name of the product
          example: Towel
        category:
          type: string
          description: Name of the category of the product
          example: Must Haves
    OfferSearchResponse:
      type: object
      properties:
        product:
          type: string
          description: Name of the product
          example: Towel
        category:
          type: string
          description: Name of the category of the product
          example: Must Haves
        offers:
          type: array
          items:
            properties:
              supplier:
                type: string
                description: Name of the supplier making the offer
                example: Hitchhiker Essentials
              price:
                type: number
                description: The price
                example: 42

paths:
  /:
    get:
      summary: Hello world endpoint
      description: >
        Returns a hello world message
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The hello world message
                    example: "Hello from Go"

  /version:
    get:
      summary: Version endpoint
      description: >
        Provides information about the version of the service.
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    type: string
                    description: The commit SHA used to build this version. Empty if this was build manually.
                    example: a1196e616ac33509b266604d832e8959966ac985
                  pipelineId:
                    type: string
                    description: The ID of the pipeline used to build this version. Empty if this was build manually.
                    example: "42"
                  buildDate:
                    type: string
                    format: date-time
                    description: The date (ISO 8601/RFC 3339) when this version was built.
                    example: "2019-03-30T14:00:52Z"
                  launchDate:
                    type: string
                    format: date-time
                    description: The date (ISO 8601/RFC 3339) when the service was launched.
                    example: "2019-03-30T14:00:52Z"

  /readiness:
    get:
      summary: Readiness check
      description: >
        Provides an application readiness check
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/HealthOK'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#components/schemas/HealthBad'

  /liveness:
    get:
      summary: Liveness check
      description: >
        Provides an application liveness check
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/HealthOK'
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#components/schemas/HealthBad'

  /api/v1/offer:
    post:
      summary: Add a new offer
      description: >
        Endpoint for suppliers to POST a new offer for a product to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Offer'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferResponse'
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'

  /api/v1/offer/batch:
    post:
      summary: Add multiple new offers
      description: >
        Endpoint for suppliers to POST multiple offers for products to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/OfferBatchRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferResponse'
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'

  /api/v1/offer/search:
    post:
      summary: Search for an offer
      description: >
        Search for an offer for a product in a category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/OfferSearchRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferSearchResponse'
        400:
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/OfferErrorResponse'
